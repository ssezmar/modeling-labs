import random
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd


# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ======
st.set_page_config(
    page_title="üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –∫—Ä–∏—Ç–µ—Ä–∏–µ–º –ü–∏—Ä—Å–æ–Ω–∞", 
    layout="wide"
)


# ====== –ó–∞–≥–æ–ª–æ–≤–æ–∫ ======
st.markdown("""
<div style="
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    text-align: center;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
">
    <h1 style="color: white; margin: 0; font-size: 2.8rem; font-weight: 700;">
        üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    </h1>
    <p style="color: rgba(255,255,255,0.9); margin: 1rem 0 0 0; font-size: 1.3rem;">
        –ö—Ä–∏—Ç–µ—Ä–∏–π —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
    </p>
</div>
""", unsafe_allow_html=True)


# ====== –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ======
distribution_type = st.selectbox(
    "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:",
    ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ N(Œº, œÉ¬≤)", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ U(a, b)"],
    index=0
)


# ====== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ sidebar ======
with st.sidebar:
    st.markdown("## ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

    if "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ" in distribution_type:
        st.markdown("### üìà –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        mu = st.number_input("Œº (—Å—Ä–µ–¥–Ω–µ–µ)", value=0.0, step=0.1, format="%.4f")
        sigma = st.number_input("œÉ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)", value=1.0, step=0.1, min_value=0.0001, format="%.4f")

        if sigma <= 0:
            st.error("‚ùå œÉ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            st.stop()
    else:
        st.markdown("### üìè –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        a = st.number_input("a (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)", value=0.0, step=0.1, format="%.4f")
        b = st.number_input("b (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)", value=1.0, step=0.1, format="%.4f")

        if a >= b:
            st.error("‚ùå a –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ b")
            st.stop()

    N = st.number_input("N (—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏)", value=1000, min_value=50, max_value=10000, step=50)
    n_bins = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", value=10, min_value=5, max_value=30, step=1)
    seed = st.number_input("Seed", value=42, step=1)

    if st.button("üé≤ –ù–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞", type="primary"):
        st.rerun()


# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ======
random.seed(seed)
np.random.seed(seed)

if "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ" in distribution_type:
    samples = [random.normalvariate(mu, sigma) for _ in range(N)]

    mean_theor = mu
    var_theor = sigma ** 2
    std_theor = sigma

    distribution_name = f"N({mu}, {sigma}¬≤)"

else:
    samples = [random.uniform(a, b) for _ in range(N)]

    mean_theor = (a + b) / 2
    var_theor = (b - a) ** 2 / 12
    std_theor = np.sqrt(var_theor)

    distribution_name = f"U({a}, {b})"


mean_sample = sum(samples) / N
var_sample = sum((x - mean_sample) ** 2 for x in samples) / N
std_sample = np.sqrt(var_sample)


# ====== –ú–ï–†–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø ======
delta1 = abs(mean_sample - mean_theor)
delta2 = abs(var_sample - var_theor)
delta3 = abs(std_sample - std_theor)

rel_error_mean = (delta1 / abs(mean_theor) * 100) if mean_theor != 0 else (delta1 * 100)
rel_error_var = (delta2 / var_theor * 100)
rel_error_std = (delta3 / std_theor * 100)


# ====== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ú–ï–† –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø ======
st.markdown("## üéØ –ú–µ—Ä—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    ">
        <h3 style="margin: 0; font-size: 1.3rem;">Œî‚ÇÅ</h3>
        <p style="margin: 0.3rem 0; font-size: 0.8rem; opacity: 0.9;">–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É</p>
        <p style="font-size: 2rem; font-weight: 700; margin: 0.5rem 0;">{delta1:.8f}</p>
        <p style="font-size: 0.8rem; opacity: 0.9;">–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_mean:.4f}%</p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #ec4899, #be185d);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 8px 25px rgba(236, 72, 153, 0.3);
    ">
        <h3 style="margin: 0; font-size: 1.3rem;">Œî‚ÇÇ</h3>
        <p style="margin: 0.3rem 0; font-size: 0.8rem; opacity: 0.9;">–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –¥–∏—Å–ø–µ—Ä—Å–∏–∏</p>
        <p style="font-size: 2rem; font-weight: 700; margin: 0.5rem 0;">{delta2:.8f}</p>
        <p style="font-size: 0.8rem; opacity: 0.9;">–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_var:.4f}%</p>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #10b981, #047857);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
    ">
        <h3 style="margin: 0; font-size: 1.3rem;">Œî‚ÇÉ</h3>
        <p style="margin: 0.3rem 0; font-size: 0.8rem; opacity: 0.9;">–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ —Å—Ç. –æ—Ç–∫–ª.</p>
        <p style="font-size: 2rem; font-weight: 700; margin: 0.5rem 0;">{delta3:.8f}</p>
        <p style="font-size: 0.8rem; opacity: 0.9;">–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_std:.4f}%</p>
    </div>
    """, unsafe_allow_html=True)


# ====== –ö–†–ò–¢–ï–†–ò–ô –•–ò-–ö–í–ê–î–†–ê–¢ –ü–ò–†–°–û–ù–ê ======
st.markdown("## üìä –ö—Ä–∏—Ç–µ—Ä–∏–π —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞")

observed_freq, bin_edges = np.histogram(samples, bins=n_bins)

if "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ" in distribution_type:
    expected_prob = np.diff(stats.norm.cdf(bin_edges, loc=mu, scale=sigma))
    expected_freq = expected_prob * N
else:
    expected_freq = np.full(n_bins, N / n_bins)

expected_freq = expected_freq * np.sum(observed_freq) / np.sum(expected_freq)

chi2_stat = sum((observed_freq[i] - expected_freq[i])**2 / expected_freq[i] 
                for i in range(len(observed_freq)) if expected_freq[i] > 0)

degrees_of_freedom = n_bins - 1
p_value = 1 - stats.chi2.cdf(chi2_stat, degrees_of_freedom)
critical_value = stats.chi2.ppf(0.95, degrees_of_freedom)


# ====== –§–û–†–ú–£–õ–ê ======
st.markdown("""
### üìê –§–æ—Ä–º—É–ª–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ–≥–ª–∞—Å–∏—è –ü–∏—Ä—Å–æ–Ω–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
""")

st.latex(r"\chi^2 = \sum_{i=1}^{m} \frac{(n_i - N p_i)^2}{N p_i}")

st.markdown("""
–≥–¥–µ:
- **m** ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–∫–ª–∞—Å—Å–æ–≤)
- **n_i** ‚Äî –Ω–∞–±–ª—é–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤ i-—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
- **N** ‚Äî –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
- **p_i** ‚Äî —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ i-—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
- **N p_i** ‚Äî –æ–∂–∏–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤ i-—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
""")


# ====== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ï–†–ò–Ø ======
col1, col2 = st.columns([2, 1])

with col1:
    fig, ax = plt.subplots(figsize=(10, 6))

    bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2
    width = bin_edges[1] - bin_edges[0]

    ax.bar(bin_centers, observed_freq, width=width*0.8, alpha=0.7, 
           color='skyblue', edgecolor='black', label='–ù–∞–±–ª—é–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã')
    ax.bar(bin_centers, expected_freq, width=width*0.4, alpha=0.8, 
           color='red', edgecolor='darkred', label='–û–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã')

    if "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ" in distribution_type:
        x_theory = np.linspace(min(samples), max(samples), 200)
        y_theory = stats.norm.pdf(x_theory, mu, sigma) * N * width
        ax.plot(x_theory, y_theory, 'g-', linewidth=2, label=f'–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è {distribution_name}')
    else:
        density_theor = N * width / (b - a)
        ax.axhline(y=density_theor, color='green', linewidth=2, 
                  label=f'–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å = {density_theor:.1f}')
        ax.axvline(x=a, color='green', linestyle='--', alpha=0.7)
        ax.axvline(x=b, color='green', linestyle='--', alpha=0.7)

    ax.set_title(f'–ö—Ä–∏—Ç–µ—Ä–∏–π –ü–∏—Ä—Å–æ–Ω–∞: {distribution_name}', fontsize=16, fontweight='bold')
    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è')
    ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax.legend()
    ax.grid(True, alpha=0.3)

    plt.tight_layout()
    st.pyplot(fig)

with col2:
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")

    st.metric("œá¬≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{chi2_stat:.6f}")
    st.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_value:.6f}")
    st.metric("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã", degrees_of_freedom)
    st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Œ±=0.05)", f"{critical_value:.6f}")

    if p_value > 0.05:
        st.success("""‚úÖ **–ù–ï –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ**

–î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
""")
    else:
        st.error("""‚ùå **–û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ**

–î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
""")


# ====== –¢–ê–ë–õ–ò–¶–ê –ß–ê–°–¢–û–¢ ======
st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ —á–∞—Å—Ç–æ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º")

intervals_data = []
for i in range(n_bins):
    left_edge = bin_edges[i]
    right_edge = bin_edges[i + 1]
    observed = observed_freq[i]
    expected = expected_freq[i]
    contribution = (observed - expected)**2 / expected if expected > 0 else 0

    intervals_data.append({
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª": f"[{left_edge:.3f}, {right_edge:.3f}{'[' if i < n_bins-1 else ']'}",
        "–ù–∞–±–ª—é–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ (n_i)": observed,
        "–û–∂–∏–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Np_i)": f"{expected:.2f}",
        "–†–∞–∑–Ω–æ—Å—Ç—å (n_i - Np_i)": f"{observed - expected:+.2f}",
        "–í–∫–ª–∞–¥ –≤ œá¬≤": f"{contribution:.6f}"
    })

intervals_df = pd.DataFrame(intervals_data)
st.dataframe(intervals_df, use_container_width=True, hide_index=True)

total_chi2 = sum(float(row["–í–∫–ª–∞–¥ –≤ œá¬≤"]) for row in intervals_data)
st.markdown(f"**–°—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤:** {total_chi2:.6f} (–¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è œá¬≤ = {chi2_stat:.6f})")


# ====== –û–°–ù–û–í–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ======
st.markdown("## üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("üìä –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ", f"{mean_sample:.6f}", 
              delta=f"{mean_sample - mean_theor:+.6f}")

with col2:
    st.metric("üìè –í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è", f"{var_sample:.6f}", 
              delta=f"{var_sample - var_theor:+.6f}")

with col3:
    st.metric("üìê –í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ç. –æ—Ç–∫–ª.", f"{std_sample:.6f}", 
              delta=f"{std_sample - std_theor:+.6f}")

with col4:
    st.metric("üî¢ –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", f"{N:,}")


# ====== –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê ======
st.markdown("### üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

if "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ" in distribution_type:
    theoretical_params = f"Œº = {mu:.4f}, œÉ¬≤ = {sigma**2:.4f}, œÉ = {sigma:.4f}"
else:
    theoretical_params = f"Œº = (a+b)/2 = {mean_theor:.4f}, œÉ¬≤ = (b-a)¬≤/12 = {var_theor:.4f}, œÉ = {std_theor:.4f}"

comparison_data = {
    "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": ["–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–î–∏—Å–ø–µ—Ä—Å–∏—è", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"],
    "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ": [f"{mean_theor:.8f}", f"{var_theor:.8f}", f"{std_theor:.8f}"],
    "–í—ã–±–æ—Ä–æ—á–Ω–æ–µ": [f"{mean_sample:.8f}", f"{var_sample:.8f}", f"{std_sample:.8f}"],
    "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å": [f"{delta1:.8f}", f"{delta2:.8f}", f"{delta3:.8f}"],
    "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (%)": [f"{rel_error_mean:.4f}", f"{rel_error_var:.4f}", f"{rel_error_std:.4f}"]
}

comparison_df = pd.DataFrame(comparison_data)
st.dataframe(comparison_df, use_container_width=True, hide_index=True)

st.markdown(f"**–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {distribution_name}:** {theoretical_params}")


# ====== –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø ======
st.markdown("## üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

if p_value > 0.05 and all(err < 10.0 for err in [rel_error_mean, rel_error_var, rel_error_std]):
    st.success("""
‚úÖ **–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!**

- –ö—Ä–∏—Ç–µ—Ä–∏–π —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞ –ù–ï –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
- –í—Å–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –º–µ–Ω–µ–µ 10%, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
""")
elif p_value > 0.05:
    st.info("""
‚ÑπÔ∏è **–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**

- –ö—Ä–∏—Ç–µ—Ä–∏–π –ü–∏—Ä—Å–æ–Ω–∞ –ù–ï –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–º–µ—é—Ç –∑–∞–º–µ—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
""")
else:
    st.warning("""
‚ö†Ô∏è **–ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è**

- –ö—Ä–∏—Ç–µ—Ä–∏–π —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏, –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
""")


# ====== FOOTER ======
st.markdown("---")
st.markdown(f"""
<div style="text-align: center; color: #666; padding: 1.5rem;">
    <h4>üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è {distribution_name}</h4>
    <p>
        <strong>–ö—Ä–∏—Ç–µ—Ä–∏–π —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞</strong> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–∏–ø–æ—Ç–µ–∑—É H‚ÇÄ –æ —Ç–æ–º, —á—Ç–æ –≤—ã–±–æ—Ä–∫–∞ 
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
    </p>
    <p>
        <strong>Œî‚ÇÅ, Œî‚ÇÇ, Œî‚ÇÉ</strong> ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    </p>
    <p><em>–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit, NumPy, SciPy –∏ Matplotlib</em></p>
</div>
""", unsafe_allow_html=True)
