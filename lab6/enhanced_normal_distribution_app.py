
import random
import numpy as np
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from scipy import stats
import pandas as pd

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ======
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# ====== –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º ======
st.markdown("""
<div style="
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    text-align: center;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
">
    <h1 style="color: white; margin: 0; font-size: 2.5rem;">
        üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    </h1>
    <p style="color: #f0f0f0; margin: 0.5rem 0 0 0; font-size: 1.2rem;">
        –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    </p>
</div>
""", unsafe_allow_html=True)

# ====== –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ======
st.sidebar.markdown("## ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")

with st.sidebar:
    st.markdown("---")
    mu = st.number_input(
        "**Œº (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)**", 
        value=0.0, 
        step=0.1, 
        format="%.4f",
        help="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
    )

    sigma = st.number_input(
        "**œÉ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)**", 
        value=1.0, 
        step=0.1, 
        min_value=0.0001, 
        format="%.4f",
        help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0)"
    )

    N = st.number_input(
        "**N (—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏)**", 
        value=1000, 
        min_value=10, 
        max_value=10000,
        step=10,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    )

    st.markdown("---")
    seed = st.number_input(
        "**Seed (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏)**",
        value=42,
        min_value=0,
        step=1,
        help="–ó–µ—Ä–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª"
    )

    if st.button("üé≤ –ù–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞", type="primary"):
        st.rerun()

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ======
if sigma <= 0:
    st.error("‚ùå **–û—à–∏–±–∫–∞:** œÉ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    st.stop()

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ======
random.seed(seed)
np.random.seed(seed)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏
samples = [random.normalvariate(mu, sigma) for _ in range(N)]

# –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
Mx_theor = mu
Dx_theor = sigma ** 2
sigma_theor = sigma

# –í—ã–±–æ—Ä–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
m_sample = sum(samples) / N
Dx_sample = sum((x - m_sample) ** 2 for x in samples) / N
sigma_sample = np.sqrt(Dx_sample)

# –ú–µ—Ä—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
delta1 = abs(m_sample - Mx_theor)
delta2 = abs(Dx_sample - Dx_theor)
delta3 = abs(sigma_sample - sigma_theor)

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
rel_error_mean = (delta1 / abs(Mx_theor) * 100) if Mx_theor != 0 else (delta1 * 100)
rel_error_var = (delta2 / Dx_theor * 100)
rel_error_std = (delta3 / sigma_theor * 100)

# ====== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ======
st.markdown("## üìà –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

# –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        label="üìä –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏",
        value=f"{N:,}",
        help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    )

with col2:
    st.metric(
        label="üìê –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
        value=f"{m_sample:.6f}",
        delta=f"{m_sample - Mx_theor:+.6f}",
        help=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ: {Mx_theor}"
    )

with col3:
    st.metric(
        label="üìè –î–∏—Å–ø–µ—Ä—Å–∏—è",
        value=f"{Dx_sample:.6f}",
        delta=f"{Dx_sample - Dx_theor:+.6f}",
        help=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è: {Dx_theor:.6f}"
    )

with col4:
    st.metric(
        label="üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
        value=f"{sigma_sample:.6f}",
        delta=f"{sigma_sample - sigma_theor:+.6f}",
        help=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ: {sigma_theor}"
    )

# ====== –ú–ï–†–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø ======
st.markdown("## üéØ –ú–µ—Ä—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ä–∞–º–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    ">
        <h3 style="margin: 0; font-size: 1.2rem;">Œî‚ÇÅ (–°—Ä–µ–¥–Ω–µ–µ)</h3>
        <p style="font-size: 2rem; font-weight: bold; margin: 0.5rem 0;">
            {delta1:.8f}
        </p>
        <p style="font-size: 0.9rem; opacity: 0.9; margin: 0;">
            –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_mean:.4f}%
        </p>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    ">
        <h3 style="margin: 0; font-size: 1.2rem;">Œî‚ÇÇ (–î–∏—Å–ø–µ—Ä—Å–∏—è)</h3>
        <p style="font-size: 2rem; font-weight: bold; margin: 0.5rem 0;">
            {delta2:.8f}
        </p>
        <p style="font-size: 0.9rem; opacity: 0.9; margin: 0;">
            –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_var:.4f}%
        </p>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""
    <div style="
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    ">
        <h3 style="margin: 0; font-size: 1.2rem;">Œî‚ÇÉ (–°—Ç. –æ—Ç–∫–ª.)</h3>
        <p style="font-size: 2rem; font-weight: bold; margin: 0.5rem 0;">
            {delta3:.8f}
        </p>
        <p style="font-size: 0.9rem; opacity: 0.9; margin: 0;">
            –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {rel_error_std:.4f}%
        </p>
    </div>
    """, unsafe_allow_html=True)

# ====== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ======
st.markdown("## üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
tab1, tab2, tab3, tab4 = st.tabs(["üìà –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "üìâ Q-Q Plot", "üìä –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"])

with tab1:
    col1, col2 = st.columns([2, 1])

    with col1:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π
        fig_hist = go.Figure()

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        fig_hist.add_trace(
            go.Histogram(
                x=samples,
                nbinsx=min(50, max(10, N//20)),
                name="–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                opacity=0.7,
                marker_color='skyblue',
                histnorm='probability density'
            )
        )

        # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        x_theory = np.linspace(min(samples), max(samples), 200)
        y_theory = stats.norm.pdf(x_theory, mu, sigma)

        fig_hist.add_trace(
            go.Scatter(
                x=x_theory,
                y=y_theory,
                mode='lines',
                name='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ N(Œº={}, œÉ={})'.format(mu, sigma),
                line=dict(color='red', width=3)
            )
        )

        fig_hist.update_layout(
            title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—ã–±–æ—Ä–∫–∏ —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π",
            xaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è",
            yaxis_title="–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
            height=500,
            showlegend=True,
            hovermode='closest'
        )

        st.plotly_chart(fig_hist, use_container_width=True)

    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        skewness = stats.skew(samples)
        kurtosis = stats.kurtosis(samples)

        stats_df = pd.DataFrame({
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
                "–ú–∏–Ω–∏–º—É–º",
                "25% –∫–≤–∞–Ω—Ç–∏–ª—å", 
                "–ú–µ–¥–∏–∞–Ω–∞",
                "75% –∫–≤–∞–Ω—Ç–∏–ª—å",
                "–ú–∞–∫—Å–∏–º—É–º",
                "–ê—Å–∏–º–º–µ—Ç—Ä–∏—è",
                "–≠–∫—Å—Ü–µ—Å—Å"
            ],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                f"{np.min(samples):.4f}",
                f"{np.percentile(samples, 25):.4f}",
                f"{np.median(samples):.4f}",
                f"{np.percentile(samples, 75):.4f}",
                f"{np.max(samples):.4f}",
                f"{skewness:.4f}",
                f"{kurtosis:.4f}"
            ]
        })

        st.dataframe(stats_df, use_container_width=True, hide_index=True)

with tab2:
    # Q-Q Plot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
    fig_qq = go.Figure()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Q-Q plot
    sorted_samples = np.sort(samples)
    n = len(sorted_samples)
    theoretical_quantiles = stats.norm.ppf(np.arange(1, n+1) / (n+1), mu, sigma)

    fig_qq.add_trace(
        go.Scatter(
            x=theoretical_quantiles,
            y=sorted_samples,
            mode='markers',
            name='–î–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏',
            marker=dict(color='blue', size=4)
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é y=x –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    min_val = min(min(theoretical_quantiles), min(sorted_samples))
    max_val = max(max(theoretical_quantiles), max(sorted_samples))

    fig_qq.add_trace(
        go.Scatter(
            x=[min_val, max_val],
            y=[min_val, max_val],
            mode='lines',
            name='–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            line=dict(color='red', dash='dash', width=2)
        )
    )

    fig_qq.update_layout(
        title="Q-Q Plot: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é",
        xaxis_title="–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–∞–Ω—Ç–∏–ª–∏",
        yaxis_title="–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –∫–≤–∞–Ω—Ç–∏–ª–∏",
        height=500,
        showlegend=True
    )

    st.plotly_chart(fig_qq, use_container_width=True)

    # –¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞
    if N <= 5000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞
        shapiro_stat, shapiro_p = stats.shapiro(samples)

        col1, col2 = st.columns(2)
        with col1:
            st.metric("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞", f"{shapiro_stat:.6f}")
        with col2:
            st.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{shapiro_p:.6f}")

        if shapiro_p > 0.05:
            st.success("‚úÖ –ì–∏–ø–æ—Ç–µ–∑–∞ –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –ù–ï –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è (p > 0.05)")
        else:
            st.warning("‚ö†Ô∏è –ì–∏–ø–æ—Ç–µ–∑–∞ –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è (p ‚â§ 0.05)")

with tab3:
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∑–Ω–∞—á–µ–Ω–∏–π
    fig_time = go.Figure()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 500 —Ç–æ—á–µ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    show_n = min(500, N)
    indices = list(range(show_n))

    fig_time.add_trace(
        go.Scatter(
            x=indices,
            y=samples[:show_n],
            mode='lines+markers',
            name='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            line=dict(color='blue', width=1),
            marker=dict(size=3)
        )
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
    fig_time.add_hline(
        y=m_sample, 
        line_dash="dash", 
        line_color="red",
        annotation_text=f"–í—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {m_sample:.4f}"
    )

    fig_time.add_hline(
        y=mu, 
        line_dash="dot", 
        line_color="green",
        annotation_text=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {mu:.4f}"
    )

    fig_time.update_layout(
        title=f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ {show_n} —Ç–æ—á–µ–∫)",
        xaxis_title="–ù–æ–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
        height=500,
        showlegend=True
    )

    st.plotly_chart(fig_time, use_container_width=True)

with tab4:
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
    st.markdown("### üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

    comparison_df = pd.DataFrame({
        "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": [
            "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Œº)",
            "–î–∏—Å–ø–µ—Ä—Å–∏—è (œÉ¬≤)", 
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            "–†–∞–∑–º–∞—Ö",
            "–ê—Å–∏–º–º–µ—Ç—Ä–∏—è",
            "–≠–∫—Å—Ü–µ—Å—Å"
        ],
        "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ": [
            f"{Mx_theor:.6f}",
            f"{Dx_theor:.6f}",
            f"{sigma_theor:.6f}",
            "-‚àû",
            "+‚àû", 
            "‚àû",
            "0.0000",
            "0.0000"
        ],
        "–í—ã–±–æ—Ä–æ—á–Ω–æ–µ": [
            f"{m_sample:.6f}",
            f"{Dx_sample:.6f}",
            f"{sigma_sample:.6f}",
            f"{np.min(samples):.6f}",
            f"{np.max(samples):.6f}",
            f"{np.max(samples) - np.min(samples):.6f}",
            f"{skewness:.6f}",
            f"{kurtosis:.6f}"
        ],
        "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å": [
            f"{delta1:.6f}",
            f"{delta2:.6f}",
            f"{delta3:.6f}",
            "-",
            "-",
            "-",
            f"{abs(skewness):.6f}",
            f"{abs(kurtosis):.6f}"
        ],
        "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (%)": [
            f"{rel_error_mean:.4f}%",
            f"{rel_error_var:.4f}%", 
            f"{rel_error_std:.4f}%",
            "-",
            "-",
            "-",
            "-",
            "-"
        ]
    })

    st.dataframe(comparison_df, use_container_width=True, hide_index=True)

    # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–≤—ã—Ö 20 –∑–Ω–∞—á–µ–Ω–∏–π
    st.markdown("### üî¢ –ü–µ—Ä–≤—ã–µ 20 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

    first_20 = samples[:20]
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 –∑–Ω–∞—á–µ–Ω–∏–π
    rows_data = []
    for i in range(0, len(first_20), 5):
        row = first_20[i:i+5]
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while len(row) < 5:
            row.append("")
        rows_data.append([f"{val:.6f}" if val != "" else "" for val in row])

    first_20_df = pd.DataFrame(
        rows_data,
        columns=[f"–ó–Ω–∞—á–µ–Ω–∏–µ {i+1}" for i in range(5)]
    )

    st.dataframe(first_20_df, use_container_width=True, hide_index=True)

# ====== FOOTER ======
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    <p>üìä <strong>–ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</strong></p>
    <p>–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit, Plotly –∏ SciPy</p>
</div>
""", unsafe_allow_html=True)
